// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// Generated by Fuzzlyn v1.5 on 2022-04-13 11:57:44
// Run on X64 Windows
// Seed: 15524766127402705757
// Reduced from 138.3 KiB to 1.6 KiB in 00:02:03
// Debug: Outputs 1
// Release: Outputs 254

public struct S0
{
    public short F0;
    public int F3;
    public byte M29(ref sbyte[] arg0)
    {
        if (this.F0 > this.F3)
        {
            this.F0 = (short)~this.F0;
            sbyte[, ] var0 = new sbyte[, ]{{1}};
        }

        return Runtime_68049_1.M31();
    }
}

public class Runtime_68049_1
{
    public static byte s_result;
    public static IRuntime s_rt;
    public static short[] s_2 = new short[]{0};
    public static sbyte[][] s_8 = new sbyte[][]{new sbyte[]{1}};
    public static byte s_9 = 28;
    public static int Main()
    {
        CollectibleALC alc = new CollectibleALC();
        System.Reflection.Assembly asm = alc.LoadFromAssemblyPath(System.Reflection.Assembly.GetExecutingAssembly().Location);
        System.Reflection.MethodInfo mi = asm.GetType(typeof(Runtime_68049_1).FullName).GetMethod(nameof(MainInner));
        System.Type runtimeTy = asm.GetType(typeof(Runtime).FullName);
        mi.Invoke(null, new object[]{System.Activator.CreateInstance(runtimeTy)});
        return (int) s_result;
    }

    public static void MainInner(IRuntime rt)
    {
        s_rt = rt;
        S0[] vr2 = new S0[]{new S0()};
        s_2[0] = vr2[0].F0++;
        byte vr3 = (byte)(vr2[0].F0 % (long)vr2[0].M29(ref s_8[0]));
        s_rt.WriteLine("c_747", vr3);
    }

    public static byte M31()
    {
        return s_9;
    }
}

public interface IRuntime
{
    void WriteLine<T>(string site, T value);
}

public class Runtime : IRuntime
{
    public void WriteLine<T>(string site, T value)
    {
        System.Console.WriteLine(value);
        if (typeof(T) == typeof(byte))
        {
            Runtime_68049_1.s_result = (byte)(((byte)(object) value) + 99);
        }
    }
}

public class CollectibleALC : System.Runtime.Loader.AssemblyLoadContext
{
    public CollectibleALC(): base(true)
    {
    }
}
